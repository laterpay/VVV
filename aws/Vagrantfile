require 'yaml'
path = "#{File.dirname(__FILE__)}"
#load data from yaml file in root directory
data = YAML::load(File.read(path + '/config.yaml'))

dir = Dir.pwd
vagrant_dir = File.expand_path(File.dirname(__FILE__))
vagrant_version = Vagrant::VERSION.sub(/^v/, '')

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure("2") do |config|

	config.vm.box = "dummy"
	config.vm.hostname = "laterpay"

	config.vm.provider :aws do |aws, override|
		aws.access_key_id = data['access_key_id']
		aws.secret_access_key = data['secret_access_key']
		aws.instance_type = data['instance_type']
		aws.keypair_name = data['keypair_name']
		aws.ami = data['ami']

		override.ssh.private_key_path = '~/.ssh/avahura.pem'
		override.ssh.username = "ubuntu"
	end

	if File.exists?(File.join(vagrant_dir,'database/data/mysql_upgrade_info')) then
		if vagrant_version >= "1.3.0"
			config.vm.synced_folder "database/data/", "/var/lib/mysql", :owner => "ubuntu", :group => "ubuntu", :mount_options => [ "dmode=777", "fmode=777" ]
		else
			config.vm.synced_folder "database/data/", "/var/lib/mysql", :owner => "ubuntu", :group => "ubuntu", :extra => 'dmode=777,fmode=777'
		end
	end

	if vagrant_version >= "1.3.0"
		config.vm.synced_folder "www/", "/srv/www/", :owner => "ubuntu", :group => "ubuntu", :mount_options => [ "dmode=775", "fmode=774" ]
	else
		config.vm.synced_folder "www/", "/srv/www/", :owner => "ubuntu", :group => "ubuntu", :extra => 'dmode=775,fmode=774'
	end

	config.vm.synced_folder "database/", "/srv/database", :owner => "ubuntu", :group => "ubuntu"
	config.vm.synced_folder "config/", "/srv/config", :owner => "ubuntu", :group => "ubuntu"
	config.vm.synced_folder "log/", "/srv/log", :owner => "ubuntu", :group => "ubuntu"
	config.vm.synced_folder "wordpress-plugin/", "/srv/wordpress-plugin/", :owner => "ubuntu", :group => "ubuntu"

	if File.exists?(File.join(vagrant_dir,'provision','provision-custom.sh')) then
		config.vm.provision :shell, :path => File.join( "provision", "provision-custom.sh" ), run: "always"
	else
		config.vm.provision :shell, :path => File.join( "provision", "provision.sh" ), run: "always"
	end

end
